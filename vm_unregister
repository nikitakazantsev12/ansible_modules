#!/usr/bin/env python
# -*- coding: utf-8 -*-#
# @(#)vm_unregister

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'AMCS'
}

DOCUMENTATION = '''
---
module: vm_unregister

short_description: Unregisters VM in vCenter Server

version_added: 2.3

description:
  - "This module unregisters VM in a vCenter Server environment."

options:
  vc_host:
    description: vCenter Server hostname or IP address
    required: true
  vc_user:
    description: vCenter Server username
    required: true
  vc_pass:
    description: vCenter Server password
    required: true
  vm_name:
    description: Name of a VM to unregister
    required: true

author:
  - Nikita Kazantsev
'''

EXAMPLES = '''
- name: Unregister VM
  vm_unregister:
    vc_host: vcenter.local
    vc_user: admin
    vc_pass: verySecret
    vm_name: test-vm-001
'''

import atexit
import sys
import time

from pyVmomi import vim, vmodl
from pyVim import connect
from pyVim.connect import Disconnect
from ansible.module_utils.basic import *

def get_obj(content, vimtype, name):
    """
    Get the vsphere object associated with a given text name
    """
    obj = None
    container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, True)
    for c in container.view:
        if c.name == name:
            obj = c
            break
    return obj

def run_module():

    module = AnsibleModule(
        argument_spec=dict(
            vc_host = dict(required=True, type='str'),
            vc_pass = dict(required=True, no_log=True, type='str'),
            vc_user = dict(required=True, type='str'),
            vm_name = dict(required=True, type='str'),
        ),
        supports_check_mode=False,
    )

    vc_host = module.params.get('vc_host')
    vc_pass = module.params.get('vc_pass')
    vc_user = module.params.get('vc_user')
    vm_name = module.params.get('vm_name')

    try:
        si = None
        try:
            si = connect.SmartConnectNoSSL(host=vc_host, port=443, user=vc_user, pwd=vc_pass)
        except IOError, e:
            pass
            atexit.register(Disconnect, si)

        content = si.RetrieveContent()

        vm = get_obj(content, [vim.VirtualMachine], vm_name)

        if vm is None:
            module.exit_json(changed=False)

        vm.UnregisterVM()

    except vmodl.MethodFault, e:
        module.fail_json(msg="Caught vmodl fault: `%s`" % str(e))
        return 1
    except Exception, e:
        module.fail_json(msg="Caught exception: `%s`" % str(e))
        return 1

    module.exit_json(changed=True)

def main():
    run_module()

if __name__ == '__main__':
    main()
